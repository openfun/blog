[{"content":"","date":"February 3, 2023","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"February 3, 2023","permalink":"/categories/cunningham/","section":"Categories","summary":"","title":"cunningham"},{"content":"","date":"February 3, 2023","permalink":"/categories/frontend/","section":"Categories","summary":"","title":"frontend"},{"content":"","date":"February 3, 2023","permalink":"/","section":"Open FUN","summary":"","title":"Open FUN"},{"content":"","date":"February 3, 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"At France Universit√© Num√©rique, we are developing several applications such as Richie, Marsha, Potsie, etc. To avoid writing duplicate and inconsistent components, we recently decided to create our own design system called Cunningham. We believe Cunningham will provide a more cohesive experience for our users and streamline the development process.\nThis blog post aims to provide a comprehensive explanation of the decision we took regarding the technology to use to build our component library. Our criteria included scalability, accessibility, customization, and open source availability.\nAt the outset, we identified three approaches for constructing our component library:\nUtilizing a component library Developing components from scratch Implementing headless components Let‚Äôs dive in ! üßê\nThe three paths considered to develop Cunningham\u003e The three paths considered to develop Cunningham # Straight to the point\u003e Straight to the point # Ask a frontend developer to create a design system and there‚Äôs a lot of chances that he will pick MUI, or any equivalent well known component library. In a lot of cases that‚Äôs a really wise choice, but you need to be aware of some potential caveats that can occur over the long run.\nSuch libraries offer ready-to-use components that allow any developers to ship fast working components. You can also quickly fine tune the components UI by passing a custom configuration to change the default colors to fit your brand.\nEven if those libraries have lots of advantages we identified some eventual high risk problems. You can customize lots of things in each components but you cannot customize everything, here is an example: How do you add a div to render some information in a deeply nested element into an existing component?\nIf you are lucky the component already have options to customize some parts of the rendering. Otherwise, you‚Äôll have to deal without it. And that‚Äôs sad :( That‚Äôs what we call the ‚ÄúWall Effect‚Äù, it names the situation where you decided to choose a component library (like MUI) at the start, into which you invested lots of efforts customizing the configuration to make it fit your desired UI and then at some point you realized that you have an important need that the component CANNOT satisfy. And then you end in a situation where you have no other choice but to change the library or to re-write such a component from scratch. In a minute you‚Äôve lost all your investment like a car crashing in a wall in the middle of the highway.\nThere is another solution where you can also contribute to the existing components library but the learning curve of large libraries like MUI is important, and you are not guaranteed that your proposal will be accepted (and that‚Äôs totally fair).\nIn some cases the missing feature you need might already be included into the paying version of the library, and adding those in a forked repository might cause some obvious issues regarding the commercial strategy of the library. Even if we wanted to buy the paying version, there would be some licensing issues because our code is licensed under MIT and the paying versions of those libraries are not, for obvious reasons.\nThe hard way\u003e The hard way # And ‚Ä¶ why not code our components from scratch? Just with plain Vanilla Javascript. Well, sometimes it‚Äôs fun to develop components from scratch, like turning raw materials into nice objects.\nWell, we had the constraint to ship a first version of a Data Table quite quickly, which can be an incredibly difficult subject considering numerous features and accessibility constraints. Creating such a component from scratch with lots of features can take weeks considering:\nPagination Rows selection Responsiveness Resizable columns Columns grouping Sorting Collapsible rows Spanning Virtualization Etc .. .. And we‚Äôre not even talking about browser compatibilities.\nCreating hard components from scratch requires a lot of initial investment, but not only. It also requires a permanent investment to maintain those to browser updates and also to some exotic devices for instance. And let‚Äôs be honest, as developers our first job is to NOT reinvent the wheel.\nWe thought there might be another approach that can offer the perfect balance between customization and development efforts.\nThe way of the cunning\u003e The way of the cunning # And what if there is an intermediate approach more flexible than library components but without the chore of rewriting all components from scratch?\nIt‚Äôs time to talk about Headless components!\nHeadless components are a type of library that provide logic, state, processing and API for UI elements and interactions but do not provide markup, styles or pre-built implementations. This means that it is possible to create a fully featured and accessible data table without having to start from scratch and spending months to develop it. Headless component libraries, like react-table, offer all the features that you would expect from a data table, so that you can focus solely on the ‚Äúfront-of-the-front‚Äù without having to worry about the ‚Äúback-of-the-front‚Äù.\nGo for a walk\u003e Go for a walk # Here is an example of a basic data table developed through react-table.\nimport * as React from \u0026#39;react\u0026#39; import ReactDOM from \u0026#39;react-dom/client\u0026#39; import type { Person } from \u0026#39;./types\u0026#39;; import { createColumnHelper, flexRender, getCoreRowModel, useReactTable, } from \u0026#39;@tanstack/react-table\u0026#39; const defaultData: Person[] = [ { firstName: \u0026#39;tanner\u0026#39;, lastName: \u0026#39;linsley\u0026#39;, age: 24, visits: 100, status: \u0026#39;In Relationship\u0026#39;, progress: 50, }, ... ] const columnHelper = createColumnHelper\u0026lt;Person\u0026gt;() const columns = [ columnHelper.accessor(\u0026#39;firstName\u0026#39;, { cell: info =\u0026gt; info.getValue(), footer: info =\u0026gt; info.column.id, }), ... ] export function BasicDataTable() { const [data, setData] = React.useState(() =\u0026gt; [...defaultData]) const rerender = React.useReducer(() =\u0026gt; ({}), {})[1] const table = useReactTable({ data, columns, getCoreRowModel: getCoreRowModel(), }) return ( \u0026lt;table\u0026gt; \u0026lt;thead\u0026gt; {table.getHeaderGroups().map(headerGroup =\u0026gt; ( \u0026lt;tr key={headerGroup.id}\u0026gt; {headerGroup.headers.map(header =\u0026gt; ( \u0026lt;th key={header.id}\u0026gt; {header.isPlaceholder ? null : flexRender( header.column.columnDef.header, header.getContext() )} \u0026lt;/th\u0026gt; ))} \u0026lt;/tr\u0026gt; ))} \u0026lt;/thead\u0026gt; \u0026lt;tbody\u0026gt; {table.getRowModel().rows.map(row =\u0026gt; ( \u0026lt;tr key={row.id}\u0026gt; {row.getVisibleCells().map(cell =\u0026gt; ( \u0026lt;td key={cell.id}\u0026gt; {flexRender(cell.column.columnDef.cell, cell.getContext())} \u0026lt;/td\u0026gt; ))} \u0026lt;/tr\u0026gt; ))} \u0026lt;/tbody\u0026gt; \u0026lt;tfoot\u0026gt; {table.getFooterGroups().map(footerGroup =\u0026gt; ( \u0026lt;tr key={footerGroup.id}\u0026gt; {footerGroup.headers.map(header =\u0026gt; ( \u0026lt;th key={header.id}\u0026gt; {header.isPlaceholder ? null : flexRender( header.column.columnDef.footer, header.getContext() )} \u0026lt;/th\u0026gt; ))} \u0026lt;/tr\u0026gt; ))} \u0026lt;/tfoot\u0026gt; \u0026lt;/table\u0026gt; ) } You can split the logic in two parts :\nSetup your table : Prepare your data, columns structure and row models to provide to the hook useReactTable Build your interface : The hook set up previously offers methods to get header, row, cell and footer data. And that‚Äôs all ! Need a pagination, a filtering column, to stick the header? All those things can be configured.\nAll features currently offered by react-table. Of course, before picking a headless component library developer should ensure that it can address all the needs. Moreover, this kind of library is often concerned about accessibility that is not something easy to address properly and can be really time-consuming. Then in comparison to library components, the offer and the community can be smaller but this means contributing to this eco-system can be simpler. Finally, Headless components can ease discussions between developer and designer as once identified, the headless library defines a feature scope and at the same time do not constraint the creativity of designer about look‚Äôn feel.\nConclusion\u003e Conclusion # At first, to be honest we were prone to use a components library like MUI but after brainstorming on the pros and cons of each approach we realized that the drawbacks of this choice were too big for us, the risk-reward balance is not safe enough for us considering the ‚ÄúWall Effect‚Äù.\nWe felt more comfortable to use a small collection of headless libraries to build our design system, this way we are sure that we will be totally free to make any UI changes without being stuck at some point in the future even if they imply a bit more investment at the start.\n","date":"February 3, 2023","permalink":"/posts/why-we-choose-headless-components-for-cunningham/","section":"Posts","summary":"At France Universit√© Num√©rique, we are developing several applications such as Richie, Marsha, Potsie, etc. To avoid writing duplicate and inconsistent components, we recently decided to create our own design system called Cunningham.","title":"Why we choose headless components for Cunningham"},{"content":"","date":"January 1, 1","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]